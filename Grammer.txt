program ::= CLASS ident { block }

block ::= constdefpart variabledefpart proceduredefpart stmt
constdefpart ::= empty
constdefpart ::= CONST constlist;
constlist ::= constlist,  ident = integer
constlist ::= ident = integer 
variabledefpart ::= empty
variabledefpart ::= VAR varlist;
varlist ::= varlist, ident
varlist ::= ident
proceduredefpart ::= PROCEDURE ident parmlist { block }
proceduredefpart ::= empty

stmt ::= simplestmt
stmt ::= callstmt
stmt ::= compoundstmt
stmt ::= ifstmt
stmt ::= whilestmt
stmt ::= stmtlist
stmt ::= empty
empty ::= 
simplestmt ::= ident = exp

callstmt ::= CALL ident parmlist
parmlist ::= ( identlist )
parmlist ::= ( )
identlist ::= identlist, ident
identlist ::= ident

compoundstmt ::= { stmtlist }
stmtlist ::= stmtlist; stmt
stmtlist ::= stmt
ifstmt ::= IF  be THEN stmt
whilestmt ::= WHILE be DO stmt

be ::= ODD exp
be ::= exp relop exp
relop ::= ==
relop ::= !=
relop ::= >
relop ::= <
relop ::= >=
relop ::= <=

exp ::= addop term
exp ::= exp addop term 
addop ::= +
addop ::= -
term ::= fac
term ::= term mop fac
mop ::= *
mop ::= /
fac ::= ident
fac ::= integer
fac ::= ( exp )
