#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
#include <time.h>
#include "Pass1.hpp"
#include "SyntaxPass.hpp"
#include "Assembler.hpp"

/**
 * Function to create decision table file in binary.
 * Format follows:
 *		4 character header
 *		3 integer size: Page, Row, & Column
 *		Table Data
 */
void TABLE()
{
	FileOut fout("DecisionTablesList.txt");
	/**
	 *	0 - 3 ::= Letter, Digit, WS, eof
	 *	4 - 7 ::= +, -, *, /
	 *	8 - 10 ::= <, >, !
	 *	11 - 13 ::= =, ',', ';'
	 *	14 - 17 ::= '(', ')', '{', '}'
	 *	18 - 21 ::= ':', $, ?, Other
	 */
	int scanTable[] =
	{
		// State 0
		2,1,0,32,
		12,13,14,3,
		4,5,7,
		6,23,24,
		25,26,27,28,
		127,29,127,127,
		// State 1
		11,1,11,11,
		11,11,11,11,
		11,11,11,
		11,11,11,
		11,11,11,11,
		127,127,127,127,
		// State 2
		2,2,10,10,
		10,10,10,10,
		10,10,10,
		10,10,10,
		10,10,10,10,
		127,127,127,127,
		// State 3
		15,15,15,15,
		15,15,8,15,
		15,15,15,
		15,15,15,
		15,15,15,15,
		127,127,127,127,
		// State 4
		16,16,16,16,
		16,16,16,16,
		16,16,16,
		17,16,16,
		16,16,16,16,
		127,127,127,127,
		// State 5
		18,18,18,18,
		18,18,18,18,
		18,18,18,
		19,18,18,
		18,18,18,18,
		127,127,127,127,
		// State 6
		22,22,22,22,
		22,22,22,22,
		22,22,22,
		20,22,22,
		22,22,22,22,
		127,127,127,127,
		// State 7
		127,127,127,127,
		127,127,127,127,
		127,127,127,
		21,127,127,
		127,127,127,127,
		127,127,127,127,
		// State 8
		8,8,8,127,
		8,8,9,8,
		8,8,8,
		8,8,8,
		8,8,8,8,
		8,8,8,8,
		// State 9
		8,8,8,127,
		8,8,8,0,
		8,8,8,
		8,8,8,
		8,8,8,8,
		8,8,8,8
	};
	int scanTable1[] =
	{
		// State 0
		2,1,0,32,
		12,13,14,33,
		4,5,7,
		6,23,24,
		25,26,27,28,
		8,29,127,127,
		// State 1
		11,1,11,11,
		11,11,11,11,
		11,11,11,
		11,11,11,
		11,11,11,11,
		127,127,127,127,
		// State 2
		2,2,10,10,
		10,10,10,10,
		10,10,10,
		10,10,10,
		10,10,10,10,
		127,127,127,127,
		// State 3
		15,15,15,15,
		15,15,8,15,
		15,15,15,
		15,15,15,
		15,15,15,15,
		127,127,127,127,
		// State 4
		16,16,16,16,
		16,16,16,16,
		16,16,16,
		17,16,16,
		16,16,16,16,
		127,127,127,127,
		// State 5
		18,18,18,18,
		18,18,18,18,
		18,18,18,
		19,18,18,
		18,18,18,18,
		127,127,127,127,
		// State 6
		22,22,22,22,
		22,22,22,22,
		22,22,22,
		20,22,22,
		22,22,22,22,
		127,127,127,127,
		// State 7
		127,127,127,127,
		127,127,127,127,
		127,127,127,
		21,127,127,
		127,127,127,127,
		127,127,127,127,
		// State 8
		127,127,127,127,
		127,127,127,127,
		127,127,127,
		127,127,127,
		127,127,127,127,
		9,127,127,127,
		// State 9
		127,127,127,127,
		127,127,127,127,
		127,127,127,
		30,127,127,
		127,127,127,127,
		127,127,127,127
	};
	int scanTable2[] =
	{
		// State 0
		2,1,0,32,
		12,13,14,3,
		4,5,7,
		6,23,24,
		25,26,27,28,
		127,29,31,127,
		// State 1
		11,1,11,11,
		11,11,11,11,
		11,11,11,
		11,11,11,
		11,11,11,11,
		127,127,127,127,
		// State 2
		2,2,10,10,
		10,10,10,10,
		10,10,10,
		10,10,10,
		10,10,10,10,
		127,127,127,127,
		// State 3
		15,15,15,15,
		15,15,8,15,
		15,15,15,
		15,15,15,
		15,15,15,15,
		127,127,127,127,
		// State 4
		16,16,16,16,
		16,16,16,16,
		16,16,16,
		17,16,16,
		16,16,16,16,
		127,127,127,127,
		// State 5
		18,18,18,18,
		18,18,18,18,
		18,18,18,
		19,18,18,
		18,18,18,18,
		127,127,127,127,
		// State 6
		22,22,22,22,
		22,22,22,22,
		22,22,22,
		20,22,22,
		22,22,22,22,
		127,127,127,127,
		// State 7
		127,127,127,127,
		127,127,127,127,
		127,127,127,
		21,127,127,
		127,127,127,127,
		127,127,127,127,
		// State 8
		8,8,8,127,
		8,8,9,8,
		8,8,8,
		8,8,8,
		8,8,8,8,
		8,8,8,127,
		// State 9
		8,8,8,127,
		8,8,8,0,
		8,8,8,
		8,8,8,
		8,8,8,8,
		8,8,8,127,
	};
	/**
	 *	0 - 11 ::= CLASS, PROCEDURE, CONST, VAR, CALL, DO, WHILE, IF, THEN, ODD, GET, PRINT
	 *	12 - 13 ::= Name, NumLit
	 *	14 - 17 ::= +, -, *, /
	 *	18 - 23 ::= <, <=, >, >=, ==, !=
	 *	24 ::= =
	 *	25 - 26 ::= ',', ';'
	 *	27 - 30 ::= '(', ')', '{', '}'
	 *	31 - 34 ::= $, ::=, ?, EOF
	 */
	int Pass1Table[] =
	{
		// TokenTable
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 1, 2,
		 3, 3, 4, 4,
		 5, 5, 5, 5, 5, 5,
		 6,
		 7, 8,
		 9,10,11,12,
		127,127,127,13,
		// SymbolTable
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 1, 2,
		 3, 3, 3, 3,
		127,127,127,127,127,127,
		127,
		127, 4,
		127,127,127, 4,
		127,127,127, 5
	};
	int SyntaxTable[] =
	{
		// State 0
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1,
		 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1,
		 1,
		 1, 1,
		 1, 1, 1, 1,
		127,127,127,127,
		// State 1
		127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		 2,127,127,127,
		 // State 2
		 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		 3,127,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127,127,127,127,
		// state 3
		127,127,127,127,127,127,127,127,127,127,127,127,
		127, 4,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127,127, 4,127,
		// state 4
		127,127,127,127,127,127,127,127,127,127,127,127,
		 5,127,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127,127,127,127,
		// state 5
		127,127,127,127,127,127,127,127,127,127,127,127,
		127, 6,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127,127,127,127,
	};
	/**
	 *	False: Non-Terminal
	 *	0 - 29 ::= Identities
	 *	30 - 34 ::= Empty, Empty, Empty, Empty, '::=', Empty, Empty
	 *	True: Terminal
	 *	0 - 11 ::= CLASS, PROCEDURE, CONST, VAR, CALL, DO, WHILE, IF, THEN, ODD, GET, PRINT
	 *	12 - 13 ::= Name, NumLit
	 *	14 - 17 ::= +, -, *, /
	 *	18 - 23 ::= <, <=, >, >=, ==, !=
	 *	24 ::= =
	 *	25 - 26 ::= ',', ';'
	 *	27 - 30 ::= '(', ')', '{', '}'
	 *	31 - 34 ::= $, ::=, ?, EOF
	 */
	int parseTable[] =
	{
		// State 0
		// False
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		127,127,127,127,127,127,127,
		// True
		127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127,127,127,127,
		// State 1
		// False
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,
		// True
		127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127, 2,127,127,
		// State 2
		// False
		 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		127,127,127,127,127,127,127,
		// True
		 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		 2, 2,
		 2, 2, 2, 2,
		 2, 2, 2, 2, 2, 2,
		 2,
		 2, 2,
		 2, 2, 2, 2,
		127, 3,127, 4,
		// Grammar Parse Table 2
		// State 0
		// False
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		127,127,127,127,127,127,127,
		// True
		127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,
		127,127,127,127,
		127,127,127,127,127,127,
		127,
		127,127,
		127,127,127,127,
		127,127,127,127,
		// State 1
		// False
		 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		127,127,127,127, 3,127,127,
		// True
		 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		 2, 2,
		 2, 2, 2, 2,
		 2, 2, 2, 2, 2, 2,
		 2,
		 2, 2,
		 2, 2, 2, 2,
		127,127,127,127,
		// State 2
		// False
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		127,127,127,127,127,127,127,
		// True
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1,
		 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1,
		 1,
		 1, 1,
		 1, 1, 1, 1,
		127,127,127,127,
	};
	int convertTable[] =
	{
		// False
		 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
		127,127,127,127,53,127,127,
		// True
		28,29,30,31,32,33,34,35,36,37,38,39,
		22,23,
		40,40,41,41,
		42,42,42,42,42,42,
		43,
		44,45,
		46,47,48,49,
		127,66,127,127,
	};
	int size1 = 10 * TableSize, size2 = 2 * IDTableSize, size3 = 3 * size2, size4 = 2 * size3;
	fout.write("PSCN"); fout.writeByte(0); fout.writeByte(10); fout.writeByte(TableSize); for (int ii = 0; ii < size1; ii++) { fout.writeByte(scanTable[ii]); };
	fout.write("GSCN"); fout.writeByte(0); fout.writeByte(10); fout.writeByte(TableSize); for (int ii = 0; ii < size1; ii++) { fout.writeByte(scanTable1[ii]); };
	fout.write("SSCN"); fout.writeByte(0); fout.writeByte(10); fout.writeByte(TableSize); for (int ii = 0; ii < size1; ii++) { fout.writeByte(scanTable2[ii]); };
	fout.write("tTKN"); fout.writeByte(0); fout.writeByte(1); fout.writeByte(IDTableSize); for (int ii = 0; ii < IDTableSize; ii++) { fout.writeByte(Pass1Table[ii]); };
	fout.write("tSYM"); fout.writeByte(0); fout.writeByte(1); fout.writeByte(IDTableSize); for (int ii = IDTableSize; ii < size2; ii++) { fout.writeByte(Pass1Table[ii]); };
	fout.write("tSTR"); fout.writeByte(0); fout.writeByte(6); fout.writeByte(IDTableSize); for (int ii = 0; ii < size3; ii++) { fout.writeByte(SyntaxTable[ii]); };
	fout.write("tGID"); fout.writeByte(3); fout.writeByte(2); fout.writeByte(IDTableSize); for (int ii = 0; ii < size3; ii++) { fout.writeByte(parseTable[ii]); };
	fout.write("tGLB"); fout.writeByte(3); fout.writeByte(2); fout.writeByte(IDTableSize); for (int ii = size3; ii < size4; ii++) { fout.writeByte(parseTable[ii]); };
	fout.write("tPRC"); fout.writeByte(0); fout.writeByte(2); fout.writeByte(IDTableSize); for (int ii = 0; ii < size2; ii++) { fout.writeByte(convertTable[ii]); };
}
/**
 * main program
 */
int main()
{
	bool memDBG = 1;
	bool buildTable = 0;
	if (memDBG)
		_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	clock_t start;
	start = clock();

	if (buildTable) { TABLE(); }
	Pass1();
	Pass2();
	AssemblyGenerator pass3;
	pass3.generateASM();

	std::cout << ((clock() - (double)start) / CLOCKS_PER_SEC);
	if (memDBG)
		_CrtDumpMemoryLeaks();
	return 0;
}