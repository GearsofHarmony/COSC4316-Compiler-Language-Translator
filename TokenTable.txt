CLASS $CLASS
Pgm1 $Pgmident
{ $LB
VAR $VAR
input $Varident
; $semi
PROCEDURE $PROCEDURE
procC1 $Procident
( $LP
) $RP
{ $LB
VAR $VAR
ans $Varident
, $comma
a $Varident
, $comma
Bob $Varident
, $comma
Jane $Varident
, $comma
b $Varident
, $comma
c $Varident
; $semi
GET $GET
a $ident
; $semi
GET $GET
Bob $ident
; $semi
GET $GET
Jane $ident
; $semi
GET $GET
b $ident
; $semi
GET $GET
c $ident
; $semi
ans $ident
= $assign
a $ident
* $mop
( $LP
( $LP
Bob $ident
+ $addop
Jane $ident
- $addop
10 $integer
) $RP
/ $mop
2 $integer
* $mop
4 $integer
) $RP
/ $mop
( $LP
b $ident
+ $addop
c $ident
) $RP
; $semi
PRINT $PRINT
ans $ident
; $semi
} $RB
PROCEDURE $PROCEDURE
GreatestNumber $Procident
( $LP
) $RP
{ $LB
VAR $VAR
numA $Varident
, $comma
numB $Varident
; $semi
GET $GET
numA $ident
; $semi
GET $GET
numB $ident
; $semi
IF $IF
numA $ident
> $relop
numB $ident
THEN $THEN
PRINT $PRINT
numA $ident
; $semi
IF $IF
numA $ident
< $relop
numB $ident
THEN $THEN
PRINT $PRINT
numB $ident
; $semi
} $RB
PROCEDURE $PROCEDURE
GreatestNumber2 $Procident
( $LP
) $RP
{ $LB
VAR $VAR
num1 $Varident
, $comma
num2 $Varident
, $comma
num3 $Varident
; $semi
GET $GET
num1 $ident
; $semi
GET $GET
num2 $ident
; $semi
GET $GET
num3 $ident
; $semi
IF $IF
num1 $ident
> $relop
num2 $ident
THEN $THEN
{ $LB
IF $IF
num1 $ident
> $relop
num3 $ident
THEN $THEN
{ $LB
PRINT $PRINT
num1 $ident
; $semi
} $RB
IF $IF
num1 $ident
< $relop
num3 $ident
THEN $THEN
{ $LB
PRINT $PRINT
num3 $ident
; $semi
} $RB
} $RB
IF $IF
num1 $ident
< $relop
num2 $ident
THEN $THEN
{ $LB
IF $IF
num2 $ident
> $relop
num3 $ident
THEN $THEN
{ $LB
PRINT $PRINT
num2 $ident
; $semi
} $RB
IF $IF
num2 $ident
< $relop
num3 $ident
THEN $THEN
{ $LB
PRINT $PRINT
num3 $ident
; $semi
} $RB
} $RB
} $RB
PROCEDURE $PROCEDURE
factorial $Procident
( $LP
) $RP
{ $LB
VAR $VAR
M $Varident
, $comma
N $Varident
; $semi
GET $GET
M $ident
; $semi
N $ident
= $assign
1 $integer
; $semi
WHILE $WHILE
M $ident
> $relop
0 $integer
DO $DO
{ $LB
N $ident
= $assign
N $ident
* $mop
( $LP
M $ident
) $RP
; $semi
M $ident
= $assign
M $ident
- $addop
1 $integer
; $semi
} $RB
PRINT $PRINT
N $ident
; $semi
} $RB
PROCEDURE $PROCEDURE
recursfactorial $Procident
( $LP
) $RP
{ $LB
VAR $VAR
RM $Varident
, $comma
RN $Varident
; $semi
IF $IF
RM $ident
> $relop
0 $integer
THEN $THEN
{ $LB
RN $ident
= $assign
RN $ident
* $mop
( $LP
RM $ident
) $RP
; $semi
RM $ident
= $assign
RM $ident
- $addop
1 $integer
; $semi
CALL $CALL
recursfactorial $Procident
( $LP
) $RP
; $semi
} $RB
} $RB
CALL $CALL
procC1 $Procident
( $LP
) $RP
; $semi
CALL $CALL
GreatestNumber $Procident
( $LP
) $RP
; $semi
CALL $CALL
GreatestNumber2 $Procident
( $LP
) $RP
; $semi
M $ident
= $assign
1 $integer
; $semi
WHILE $WHILE
M $ident
> $relop
0 $integer
DO $DO
{ $LB
CALL $CALL
factorial $Procident
( $LP
) $RP
; $semi
} $RB
RM $ident
= $assign
1 $integer
; $semi
WHILE $WHILE
RM $ident
> $relop
0 $integer
DO $DO
{ $LB
RN $ident
= $assign
1 $integer
; $semi
CALL $CALL
recursfactorial $Procident
( $LP
) $RP
; $semi
PRINT $PRINT
RN $ident
; $semi
GET $GET
RM $ident
; $semi
} $RB
} $RB
